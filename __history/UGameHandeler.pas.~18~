unit UGameHandeler;

interface

uses
  System.SysUtils, classes, UCard, UFileHandeling, UFish,
  System.Generics.Collections, UAbstractCardGroup, math;

type
  TArrayOfString = Tarray<string>;
  TCards = array of TCard;

  TGameHandeler = class
  private
    Delimiter: string;

    commands: TDictionary<string, integer>;
    RankNames: TDictionary<string, integer>;
    SuitNames: TDictionary<string, integer>;

    game: TFish;
    currentUser: integer;

  public
    constructor create;
    function GetUserIn: TArrayOfString;
    procedure man;
    procedure ExecuteUserInstruction(cmd: TArrayOfString);
    procedure Welcome;
    procedure play;
    function interpretCard(input: string): TCard;
    function interpretRank(input: string): integer;
    procedure displayBooks;
    Destructor destroy;
  end;

const
  manFilePath = 'man.txt';

implementation

{ TGameHandeler }

function TGameHandeler.GetUserIn: TArrayOfString;
var
  userin: string;
begin
  while length(userin) < 3 do
  begin
    write('~: ');
    readln(userin);
  end;

  result := userin.Split([Delimiter]);

end;

function TGameHandeler.interpretCard(input: string): TCard;
var
  SplitInput: Tarray<string>;
  rank, suit: integer;

begin
  SplitInput := input.Split([' ']);
  rank := RankNames.Items[SplitInput[0]];
  suit := SuitNames.Items[SplitInput[2]];
  result := game.pack.findCard(rank, suit);
end;

function TGameHandeler.interpretRank(input: string): integer;
begin
  result := RankNames.Items[input];
end;

constructor TGameHandeler.create;
var
  playerNumber: integer;
begin
  Delimiter := '; ';

  RankNames := TDictionary<string, integer>.create();

  RankNames.add('Ace', 0);
  RankNames.add('ace', 0);
  RankNames.add('Two', 1);
  RankNames.add('two', 1);
  RankNames.add('2', 1);
  RankNames.add('Three', 2);
  RankNames.add('three', 2);
  RankNames.add('3', 2);
  RankNames.add('Four', 3);
  RankNames.add('four', 3);
  RankNames.add('4', 3);
  RankNames.add('Five', 4);
  RankNames.add('five', 4);
  RankNames.add('5', 4);
  RankNames.add('Six', 5);
  RankNames.add('six', 5);
  RankNames.add('6', 5);
  RankNames.add('Seven', 6);
  RankNames.add('seven', 6);
  RankNames.add('7', 6);
  RankNames.add('Eight', 7);
  RankNames.add('eight', 7);
  RankNames.add('8', 7);
  RankNames.add('Nine', 8);
  RankNames.add('nine', 8);
  RankNames.add('9', 8);
  RankNames.add('Ten', 9);
  RankNames.add('ten', 9);
  RankNames.add('10', 9);
  RankNames.add('Jack', 10);
  RankNames.add('jack', 10);
  RankNames.add('Queen', 11);
  RankNames.add('queen', 11);
  RankNames.add('King', 12);
  RankNames.add('king', 12);

  SuitNames := TDictionary<string, integer>.create();

  SuitNames.add('Spades', 0);
  SuitNames.add('spades', 0);
  SuitNames.add('Hearts', 1);
  SuitNames.add('hearts', 1);
  SuitNames.add('Clubs', 2);
  SuitNames.add('clubs', 2);
  SuitNames.add('Diamonds', 3);
  SuitNames.add('diamonds', 3);

  commands := TDictionary<string, integer>.create();

  commands.add('m', 0);
  commands.add('man', 0);
  commands.add('s', 1);
  commands.add('save', 1);
  commands.add('a', 2);
  commands.add('ask', 2);
  commands.add('q', 3);
  commands.add('quit', 3);

  Welcome;

  repeat
    write('How many players: ');
    readln(playerNumber);
    playerNumber := playerNumber - 1 // -= !!!!!
  until (playerNumber > 0) and (playerNumber < 5);

  game := TFish.create(playerNumber);

end;

destructor TGameHandeler.destroy;
begin
  RankNames.destroy;
  SuitNames.destroy;
  commands.destroy;
  game.destroy;
end;

procedure TGameHandeler.ExecuteUserInstruction(cmd: TArrayOfString);
var
  cards: UAbstractCardGroup.TCards;
  i: integer;
begin
  case commands.Items[cmd[0]] of
    0:
      begin
        man;
        ExecuteUserInstruction(GetUserIn);
      end;
    // 1:
    // Add code to save game

    2:
      begin
        cards := game.AskForCard(interpretRank(cmd[1]),
          game.players[currentUser], game.players[strToint(cmd[2])]);
        if length(cards) = 0 then
        begin
          writeln('Player does not have card');
          writeln('GO FISH');
          writeln('Got card: ', game.GoFish(game.players[currentUser])
            .GetExplicitCard);

          writeln('');  
          writeln('---');
          writeln('The following books have been won:');
          displayBooks;
        end
        else
        begin
          writeln('Got cards from user');
          for i := 0 to length(cards) - 1 do
            writeln(cards[i].GetExplicitCard);

          writeln('');  
          writeln('---');  
          writeln('The following books have been won:');
          displayBooks;
        end;
      end;
    3:
      game.destroy;
  end;

end;

procedure TGameHandeler.displayBooks;
var
  i: integer;
begin
  writeln('The books won are as follows');
  for i := 0 to length(game.players) do
  begin
    writeln('Score for player ', inttoStr(i), ': ', inttoStr(game.books[i]));
  end;
end;

procedure TGameHandeler.man;
var
  manFile: TFile;
  mancontents: TArrayOfString;

begin
  manFile := TFile.create(manFilePath);
  manFile.printfile;
  manFile.destroy;
end;

procedure TGameHandeler.play;
var
  i, x: integer;
  cardsInHand: UAbstractCardGroup.TCards;
  totalBooksWon: integer;

begin
  while 12<totalBooksWon do
  begin

    for i := 0 to length(game.players) do
    begin

      writeln('----------------------------');
      writeln('Player ', inttoStr(i), ' turn!');
      writeln('Your hand contains: ');

      cardsInHand := game.players[i].getcontents;

      for x := 0 to length(cardsInHand) - 1 do
        writeln(cardsInHand[x].GetExplicitCard);

      writeln('');
      ExecuteUserInstruction(GetUserIn);

      if game.checkForBook(currentUser) then
      begin
        writeln('YOU GOT A BOOK!');
        writeln('The scores are as follows');
        displayBooks;
      end;

      writeln('Waiting for enter for next player');
      readln;

    end;

    totalBooksWon := 0
    for i := 0 to length(game.books) do begin
      totalBooksWon = totalBooksWon + 1
    end;
  end;

  writeln('====================================');
  writeln('-------------GAME OVER--------------');
  writeln('====================================');

  writeln('SCORES:');
  displayBooks;
end;

procedure TGameHandeler.Welcome;
const
  welcomeFilePath = 'ASCIIFISH.txt';
var
  welcomeFile: TFile;
begin
  welcomeFile := TFile.create(welcomeFilePath);
  welcomeFile.printfile;
  welcomeFile.destroy;
end;

end.
